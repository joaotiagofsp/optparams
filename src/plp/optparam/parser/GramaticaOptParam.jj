options
{
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(GramaticaOptParam)
package plp.optparam.parser;
import plp.lf1.Programa;
import plp.le1.expressoes.*;
import plp.le2.expressoes.*;
import plp.lf1.expressoes.*;
import plp.optparam.expressoes.*;
import plp.le2.excecoes.*;
import plp.le1.util.*;
import plp.optparam.util.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class GramaticaOptParam
{
  public static void main(String args []) throws ParseException
  {
    if (args.length == 0)
    {
      System.out.println("OptParam Parser Version 0.0.1:  Nenhuma expressao passada como argumento para analise");
      return;
    }
    GramaticaOptParam parser = new GramaticaOptParam(new StringReader(args [0]));
    try
    {
      System.out.println(args [0]);
      Programa programa = parser.Input();
      System.out.println("OptParam Parser Parser v.0.0.1:  Programa analisado com sucesso");
      try
      {
        if (!programa.checaTipo())
        {
          System.out.println("OptParam Parser v.0.0.1: Erro de tipo");
        }
        else
        {
          System.out.print("OptParam Parser v.0.0.1:  Resultado do programa = ");
          programa.executar();
        }
      }
      catch (VariavelJaDeclaradaException ee)
      {
        System.out.println("OptParam Parser v.0.0.1: " + ee);
        ee.printStackTrace();
      }
      catch (VariavelNaoDeclaradaException ee)
      {
        System.out.println("OptParam Parser v.0.0.1: " + ee);
        ee.printStackTrace();
      }
    }
    catch (ParseException e)
    {
      System.out.println("OptParam Parser v.0.0.1:  Erro encontrado durante a analise");
    }
  }
}

PARSER_END(GramaticaOptParam)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  < SINGLE_LINE_COMMENT :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < FORMAL_COMMENT :
    "/**" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
| < MULTI_LINE_COMMENT :
    "/*" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
}

TOKEN : /* TOKENS DE FUNCIONAL 1 */
{
  < AND : "and" >
| < OR : "or" >
| < NOT : "not" >
| < LENGTH : "length" >
| < TRUE : "true" >
| < FALSE : "false" >
| < LET : "let" >
| < VAR : "var" >
| < IN : "in" >
| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < FUNC : "fun" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
| < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    )*
    "\"" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >
| < #DIGIT : [ "0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < BANG : "!" >
| < TILDE : "~" >
| < HOOK : "?" >
| < COLON : ":" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NE : "!=" >
| < SC_OR : "||" >
| < SC_AND : "&&" >
| < CONCAT : "++" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < BIT_AND : "&" >
| < BIT_OR : "|" >
| < XOR : "^" >
| < REM : "%" >
}

Programa Input() :
{
  Programa retorno;
}
{
  retorno = PPrograma() < EOF >
  {
    return retorno;
  }
}

Valor PValorInteiro() :
{
  Token token;
}
{
  token = < INTEGER_LITERAL >
  {
    return new ValorInteiro(Integer.parseInt(token.toString()));
  }
}

Valor PValorBooleano() :
{}
{
  < FALSE >
  {
    return new ValorBooleano(false);
  }
| < TRUE >
  {
    return new ValorBooleano(true);
  }
}

Valor PValorString() :
{
  Token token;
}
{
  token = < STRING_LITERAL >
  {
    String tokenStr = token.toString();
    tokenStr = tokenStr.substring(1, tokenStr.length() - 1);
    return new ValorString(tokenStr);
  }
}

Valor PValor() :
{
  Valor retorno;
}
{
  (
    retorno = PValorInteiro()
  | retorno = PValorBooleano()
  | retorno = PValorString()
  )
  {
    return retorno;
  }
}

Id PId() :
{
  Token token;
}
{
  token = < IDENTIFIER >
  {
    String tokenStr = token.toString();
    return new Id(tokenStr);
  }
}

Expressao PExpMenos() :
{
  Expressao retorno;
}
{
  < MINUS > retorno = PExpPrimaria()
  {
    return new ExpMenos(retorno);
  }
}

Expressao PExpNot() :
{
  Expressao retorno;
}
{
  < NOT > retorno = PExpPrimaria()
  {
    return new ExpNot(retorno);
  }
}

Expressao PExpLength() :
{
  Expressao retorno;
}
{
  < LENGTH > retorno = PExpPrimaria()
  {
    if (retorno instanceof ValorString)
    {
      ValorString val = (ValorString) retorno;
    }
    return new ExpLength(retorno);
  }
}

Expressao PExpPrimaria() :
{
  Expressao retorno;
}
{
  (
    retorno = PValor()
  | retorno = PId()
  | < LPAREN > retorno = PExpressao() < RPAREN >
  )
  {
    return retorno;
  }
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////    REGRA DE PRODUCAO ATUALIZADA   //////////////////////
//// OBS: essa regra so era chamada no contexto de uma declaracao de Funcao ///
///////////////////////////////////////////////////////////////////////////////
List PListaId() :
{
  Id id;
  ParametroFuncao param;
  Valor valorDefault;
  List < ParametroFuncao > retorno = null;
}
{
  (
    ///////////////////////////////////////////////////////////////////////////////
    // ALTERADA A ESTRUTURA DA DECLARACAO DA FUNCAO PARA INCLUIR VALORES DEFAULT //
    ///////////////////////////////////////////////////////////////////////////////
    id = PId() < LPAREN > valorDefault = PValor() < RPAREN >
    {
      if (retorno == null)
      {
        retorno = new ArrayList < ParametroFuncao > ();
        retorno.add(new ParametroFuncao(id, valorDefault));
      }
      else
      {
        retorno.add(new ParametroFuncao(id, valorDefault));
      }
    }
  )*
  {
    return retorno;
  }
}

DeclaracaoFuncional PDeclVar() :
{
  Id id;
  Expressao expressao;
  DeclaracaoFuncional retorno;
}
{
  (
    < VAR > id = PId() < ASSIGN > expressao = PExpressao()
  )
  {
    return new DecVariavel(id, expressao);
  }
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////    REGRA DE PRODUCAO ATUALIZADA   //////////////////////
///////////////////////////////////////////////////////////////////////////////
DeclaracaoFuncional PDeclFuncao() :
{
  Id id;
  Expressao expressao;
  DeclaracaoFuncional retorno;
  /////////////////////////////////////////////////
  ///   ALTERADO O TIPO DOS ELEMENTOS DA LISTA  ///
  /////////////////////////////////////////////////
  List < ParametroFuncao > lista;
}
{
  (
    < FUNC > id = PId() lista = PListaId() < ASSIGN > expressao = PExpressao()
  )
  {
    return new DecFuncao(id, lista, expressao);
  }
}

DecComposta PDecComposta() :
{
  DeclaracaoFuncional d1;
  DeclaracaoFuncional d2;
}
{
  (
    d1 = PDeclVar()
  | d1 = PDeclFuncao()
  )
  < COMMA > d2 = PDeclFuncional()
  {
    return new DecComposta(d1, d2);
  }
}

DeclaracaoFuncional PDeclFuncional() :
{
  DeclaracaoFuncional decl;
}
{
  (
    LOOKAHEAD(PDeclVar() < COMMA >)
    decl = PDecComposta()
  | LOOKAHEAD(PDeclFuncao() < COMMA >)
    decl = PDecComposta()
  | decl = PDeclVar()
  | decl = PDeclFuncao()
  | < LPAREN > decl = PDeclFuncional() < RPAREN >
  )
  {
    return decl;
  }
}

Expressao PExpDeclaracao() :
{
  DeclaracaoFuncional declaracoes;
  Expressao expressao;
}
{
  < LET > declaracoes = PDeclFuncional() < IN > expressao = PExpressao()
  {
    return new ExpDeclaracao(declaracoes, expressao);
  }
}

Expressao PExpCondicional() :
{
  Expressao expCond, expThen, expElse;
}
{
  < IF > expCond = PExpressao() < THEN > expThen = PExpressao() < ELSE > expElse = PExpressao()
  {
    return new IfThenElse(expCond, expThen, expElse);
  }
}

Expressao PAplicacao() :
{
  List expressoes = new ArrayList();
  Expressao expressao;
  Id id;
}
{
  id = PId() < LPAREN >
  (
    expressao = PExpressao()
	{
	  expressoes.add(expressao);
	}
	|
	( < COMMA >
	  | 
	  expressao = PExpressao()
	  {
	    expressoes.add(expressao);
	  }
	)
	
  )*
  < RPAREN >
  {
    return new Aplicacao(id, expressoes);
  }
}

Expressao PExpUnaria() :
{
  Expressao retorno;
}
{
  (
    LOOKAHEAD(PExpMenos())
    retorno = PExpMenos()
  | LOOKAHEAD(PExpNot())
    retorno = PExpNot()
  | LOOKAHEAD(PExpLength())
    retorno = PExpLength()
  | LOOKAHEAD(PExpDeclaracao())
    retorno = PExpDeclaracao()
  | LOOKAHEAD(PExpCondicional())
    retorno = PExpCondicional()
  | LOOKAHEAD(PId() < LPAREN >)
    retorno = PAplicacao()
  | LOOKAHEAD(PExpPrimaria())
    retorno = PExpPrimaria()
  )
  {
    return retorno;
  }
}

Expressao PExpBinaria() :
{
  Expressao retorno, param2;
}
{
  (
    retorno = PExpBinaria2()
    (
      < EQ > param2 = PExpBinaria2()
      {
        retorno = new ExpEquals(retorno, param2);
      }
    )*
  )
  {
    return retorno;
  }
}

Expressao PExpBinaria2() :
{
  Expressao retorno, param2;
}
{
  (
    retorno = PExpBinaria3()
    (
      < PLUS > param2 = PExpBinaria3()
      {
        retorno = new ExpSoma(retorno, param2);
      }
    | < MINUS > param2 = PExpBinaria3()
      {
        retorno = new ExpSub(retorno, param2);
      }
    | < OR > param2 = PExpBinaria3()
      {
        retorno = new ExpOr(retorno, param2);
      }
    | < CONCAT > param2 = PExpBinaria3()
      {
        retorno = new ExpConcat(retorno, param2);
      }
    )*
  )
  {
    return retorno;
  }
}

Expressao PExpBinaria3() :
{
  Expressao retorno, param2;
}
{
  (
    retorno = PExpUnaria()
    (
      < AND > param2 = PExpUnaria()
      {
        retorno = new ExpAnd(retorno, param2);
      }
    )*
  )
  {
    return retorno;
  }
}

Expressao PExpressao() :
{
  Expressao retorno;
}
{
  retorno = PExpBinaria()
  {
    return retorno;
  }
}

Programa PPrograma() :
{
  Expressao retorno;
}
{
  retorno = PExpressao()
  {
    return new Programa(retorno);
  }
}
